"use strict";

!function ($) {
  $.fn.dnCalendar = function (options) {
    var self = $(this),
        settings = {},
        currDate = new Date(),
        defDate = null,
        todayDate = new Date(),
        weekNames = ["Domingo", "Segunda-feira", "TerÃ§a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "SÃ¡bado"],
        weekNamesHasAlreadySorted = !1;

    Array.prototype.move = function (old_index, new_index) {
      for (; old_index < 0;) {
        old_index += this.length;
      }

      for (; new_index < 0;) {
        new_index += this.length;
      }

      if (new_index >= this.length) for (var k = new_index - this.length; 1 + k--;) {
        this.push(void 0);
      }
      this.splice(new_index, 0, this.splice(old_index, 1)[0]);
    };

    var getDayIndexOfWeek = function getDayIndexOfWeek() {
      for (var i = 0; i < weekNames.length; i++) {
        if (weekNames[i] == settings.startWeek.toLowerCase()) return i;
      }

      return 0;
    },
        weekCount = function weekCount(year, month_number) {
      var firstOfMonth = new Date(year, month_number - 1, 1),
          lastOfMonth = new Date(year, month_number, 0),
          used = firstOfMonth.getDay() + lastOfMonth.getDate();
      return Math.ceil(used / 7);
    },
        getWeekOfMonth = function getWeekOfMonth(month, year) {
      for (var weeks = [], firstDate = new Date(year, month, 1), lastDate, numDays = new Date(year, month + 1, 0).getDate(), lastDateOfPrevMonth, prevDate = new Date(year, month, 0).getDate() - firstDate.getDay(), firstDateOfNextMonth, nextDate = new Date(year, month + 1, 1).getDate(), date = 1; date <= numDays;) {
        for (var i = 0, tempWeek = []; i < 7;) {
          0 == weeks.length ? i >= firstDate.getDay() ? (tempWeek.push(date), date++) : (prevDate++, tempWeek.push(prevDate)) : date <= numDays ? (tempWeek.push(date), date++) : tempWeek.push(nextDate++), i++;
        }

        weeks.push(tempWeek);
      }

      return weeks;
    },
        sortingBySelectedDay = function sortingBySelectedDay(weeks, month, year) {
      var startDayWeek = getDayIndexOfWeek(),
          lastDateOfPrevMonth,
          prevDate = new Date(year, month, 0).getDate(),
          lastDate = new Date(year, month + 1, 0).getDate();

      function isset(arr, val) {
        for (var found = !1, m = 0; m < arr.length; m++) {
          if (arr[m] == val) {
            found = !0;
            break;
          }
        }

        return found;
      }

      if (startDayWeek > 0) {
        for (var newArr = [], nWeeks = weeks.length, i = 0; i < nWeeks; i++) {
          var tempArr = [];

          if (0 == i && 0 == newArr.length) {
            if (1 == weeks[i][0]) {
              for (var startPrevDate = prevDate - (7 - startDayWeek - 1); startPrevDate <= prevDate;) {
                tempArr.push(startPrevDate), startPrevDate++;
              }

              for (var j = 0; j < weeks[i].length; j++) {
                var val, isPush;
                if (tempArr.length < weeks[i].length) (isPush = isset(tempArr, val = weeks[i][j])) || tempArr.push(val);
              }
            } else for (var j = 0; j < weeks[i].length; j++) {
              if (tempArr.length < weeks[i].length) if (void 0 !== weeks[i][j + startDayWeek]) tempArr.push(weeks[i][j + startDayWeek]);else if (void 0 !== weeks[i + 1]) for (var k = 0; k < weeks[i + 1].length; k++) {
                var val, isPush;
                if (tempArr.length < weeks[i].length) (isPush = isset(tempArr, val = weeks[i + 1][k])) || tempArr.push(val);
              }
            }
          } else for (var newI = i; newI >= 0; newI--) {
            for (var found = !1, j = 0; j < weeks[newI].length; j++) {
              var newArrRow,
                  newArrCol = newArr[newArrRow = newArr.length - 1].length - 1,
                  val,
                  isPush;
              if (newArr[newArrRow][newArrCol] == weeks[newI][j] && (found = !0), 1 == found) if (void 0 !== weeks[newI][j + startDayWeek]) {
                if (tempArr.length < weeks[newI].length) if (!(isPush = isset(tempArr, val = weeks[newI][j + startDayWeek]))) if (void 0 !== tempArr[tempArr.length - 1]) {
                  var lastIndexTempArr = tempArr[tempArr.length - 1];
                  lastIndexTempArr + 1 != val && lastIndexTempArr + 1 < lastDate ? tempArr.push(lastIndexTempArr + 1) : tempArr.push(weeks[newI][j + startDayWeek]);
                } else tempArr.push(weeks[newI][j + startDayWeek]);
              } else if (void 0 !== weeks[newI + 1]) for (var k = 0; k < weeks[newI + 1].length; k++) {
                var val, isPush;
                if (tempArr.length < weeks[newI].length) (isPush = isset(tempArr, val = weeks[newI + 1][k])) || tempArr.push(val);
              }
            }
          }

          newArr.push(tempArr);
        }

        for (var found = !1, i = 1; i < newArr.length; i++) {
          for (var j = 0; j < newArr[i].length; j++) {
            if (newArr[i][j] == lastDate) {
              found = !0;
              break;
            }
          }

          if (1 == found) break;
        }

        var newArrRow = newArr.length - 1;

        if (0 == found) {
          for (var newArrCol = newArr[newArrRow].length - 1, lastDateInNewArr = newArr[newArrRow][newArrCol], tempArr = []; lastDateInNewArr < lastDate;) {
            lastDateInNewArr++, tempArr.push(lastDateInNewArr);
          }

          if (tempArr.length < 7) for (var limit = 7 - tempArr.length, date = 1; date <= limit;) {
            tempArr.push(date), date++;
          }
          newArr.push(tempArr);
        } else {
          var newArrCol,
              lastDateInNewArr,
              colLeft = 7 - ((newArrCol = newArr[newArrRow].length - 1) + 1);

          for ((lastDateInNewArr = newArr[newArrRow][newArrCol]) > 7 ? lastDateInNewArr = 1 : lastDateInNewArr += 1; colLeft > 0;) {
            newArr[newArrRow].push(lastDateInNewArr), lastDateInNewArr++, colLeft--;
          }
        }

        return newArr;
      }

      return weeks;
    },
        draw = function draw() {
      for (var m = currDate.getMonth(), y = currDate.getFullYear(), dates = getWeekOfMonth(m, y), i = 0; i < dates.length; i++) {
        for (var string = "", j = 0; j < dates[i].length; j++) {
          string += dates[i][j] + " ";
        }
      }

      dates = sortingBySelectedDay(dates, m, y);

      for (var i = 0; i < dates.length; i++) {
        for (var string = "", j = 0; j < dates[i].length; j++) {
          string += dates[i][j] + " ";
        }
      }

      var headerMonth = settings.monthNames[m];
      1 == settings.monthUseShortName && (headerMonth = settings.monthNamesShort[m]);
      var headerGroup = $("<div id='dncalendar-header' class='dncalendar-header'></div>");
      headerGroup.append("<h2>" + headerMonth + " - " + y + "</h2>");
      var prevInactive = !1,
          minDate = null;

      if (void 0 !== settings.minDate) {
        var minDateArr = settings.minDate.split("-");
        (minDate = new Date(minDateArr[0], minDateArr[1] - 1, minDateArr[2])).getFullYear() >= y && minDate.getMonth() >= m && (prevInactive = !0);
      }

      var nextInactive = !1,
          maxDate = null;

      if (void 0 !== settings.maxDate) {
        var maxDateArr = settings.maxDate.split("-");
        (maxDate = new Date(maxDateArr[0], maxDateArr[1] - 1, maxDateArr[2])).getFullYear() <= y && maxDate.getMonth() <= m && (nextInactive = !0);
      }

      var calendarLinksGroup = $("<div id='dncalendar-links' class='dncalendar-links'></div>"),
          prevLinkGroup = $("<i id='dncalendar-prev-month' class='fas fa-arrow-circle-left dncalendar-prev-month'></i>"),
          nextLinkGroup = $("<i id='dncalendar-next-month' class='fas fa-arrow-circle-right dncalendar-next-month'></i>");
      prevInactive && (prevLinkGroup.addClass("dncalendar-inactive"), prevLinkGroup.removeAttr("id")), nextInactive && (nextLinkGroup.addClass("dncalendar-inactive"), nextLinkGroup.removeAttr("id")), calendarLinksGroup.append(prevLinkGroup), calendarLinksGroup.append(nextLinkGroup), headerGroup.append(calendarLinksGroup);
      var bodyGroup = $("<div id='dncalendar-body' class='dncalendar-body'></div>"),
          tableGroup = $("<table></table>"),
          weekName = settings.dayNames;
      1 == settings.dayUseShortName && (weekName = settings.dayNamesShort);
      var dayIndex = getDayIndexOfWeek();

      if (0 == weekNamesHasAlreadySorted) {
        for (var oldIndex = null, newIndex = 0, i = 0; i < weekName.length; i++) {
          i >= dayIndex && (null == oldIndex && (oldIndex = i), weekName.move(oldIndex, newIndex), oldIndex++, newIndex++);
        }

        weekNamesHasAlreadySorted = !0;
      }

      for (var sundayIndex = 0 == dayIndex ? 0 : 7 - dayIndex, saturdayIndex = 6 - dayIndex, tableHeadGroup = $("<thead></thead>"), tableHeadRowGroup = $("<tr></tr>"), weekNameLength = weekName.length, i = 0; i < weekNameLength; i++) {
        tableHeadRowGroup.append("<td " + (i == sundayIndex || i == saturdayIndex ? 'class="holiday"' : "") + ">" + weekName[i] + "</td>");
      }

      tableHeadGroup.append(tableHeadRowGroup);
      var tableBodyGroup = $("<tbody></tbody>"),
          firstDayOfMonth = new Date(y, m, 1),
          lastDateOfPrevMonth,
          prevDate = new Date(y, m, 0).getDate() - firstDayOfMonth.getDay() + 1,
          firstDateOfNextMonth,
          nextDate = new Date(y, m + 1, 1).getDate(),
          limitMinDate = 0;
      null != minDate && (limitMinDate = minDate.getDate());
      var limitMaxDate = 0;
      null != maxDate && (limitMaxDate = maxDate.getDate());
      var todayTitle = "today",
          defaultDateTitle = "default date";
      void 0 !== settings.dataTitles && (void 0 !== settings.dataTitles.defaultDate && (defaultDateTitle = settings.dataTitles.defaultDate), void 0 !== settings.dataTitles.today && (todayTitle = settings.dataTitles.today));

      for (var sundayIndex = 0 == dayIndex ? 0 : 7 - dayIndex, saturdayIndex = 0 == dayIndex ? 6 : 7 - (dayIndex + 1), nDates = dates.length, i = 0; i < nDates; i++) {
        for (var tableBodyRowGroup = $("<tr></tr>"), nDate = dates[i].length, j = 0; j < nDate; j++) {
          var date = dates[i][j],
              month = m + 1,
              year = y,
              colDateClass = "",
              colDateDataAttr = "",
              showCalendarClick = !0;
          0 == i && dates[i][j] > 7 && (showCalendarClick = !1, (month -= 1) <= 0 && (month = 12, year -= 1)), i == nDates - 1 && dates[i][j] <= 7 && (showCalendarClick = !1, (month += 1) >= 12 && (month = 1, year += 1)), todayDate.getFullYear() == year && todayDate.getMonth() + 1 == month && todayDate.getDate() == date && (colDateClass = " today-date ", colDateDataAttr = "data-title='" + todayTitle + "'"), null != defDate && defDate.getFullYear() == year && defDate.getMonth() + 1 == month && defDate.getDate() == date && (colDateClass = " default-date ", colDateDataAttr = "data-title='" + defaultDateTitle + "'"), j != sundayIndex && j != saturdayIndex || (colDateClass += " holiday "), void 0 !== settings.notes && dateIsNotes(new Date(year, month - 1, date)) && (colDateClass += " note ");
          var dataHoje = new Date().getDate(),
              mesAtual = new Date().getMonth() + 1,
              controleDeClasses = !1,
              controleDeMeses = !1;
          dataHoje < date && mesAtual == month ? (showCalendarClick = !0, controleDeClasses = !0) : month == mesAtual + 1 || month == mesAtual + 2 ? (showCalendarClick = !0, controleDeClasses = !0) : showCalendarClick = !1, month != parseInt(mesAtual - 1) && month != parseInt(mesAtual + 2) || (controleDeMeses = !0);
          var colDate = "<td id='" + (1 == showCalendarClick ? "calendarClick" : "") + "' class='" + colDateClass + " " + (1 == controleDeMeses ? "numApagado" : "") + " " + (1 == showCalendarClick ? "calendarClick" : "") + " " + (1 == controleDeClasses ? "disponivel" : "indisponivel") + "' data-date='" + date + "' data-month='" + month + "' data-year='" + year + "'><div class='entry'" + colDateDataAttr + "'>" + date + "</div></td>",
              myCurrentDate,
              myCurrentDate;
          if (null != minDate) minDate > (myCurrentDate = new Date(year, month - 1, date)) && (colDate = "<td class='" + colDateClass + "' data-date='" + date + "' data-month='" + month + "' data-year='" + year + "'><div class='entry' " + colDateDataAttr + ">" + date + "</div></td>");
          if (null != maxDate) maxDate < (myCurrentDate = new Date(year, month - 1, date)) && (colDate = "<td class='" + colDateClass + "' data-date='" + date + "' data-month='" + month + "' data-year='" + year + "'><div class='entry' " + colDateDataAttr + ">" + date + "</div></td>");
          tableBodyRowGroup.append(colDate);
        }

        tableBodyGroup.append(tableBodyRowGroup);
      }

      var notesGroup = "";

      if (settings.showNotes) {
        var notes = getNotesThisMonth(),
            notesLength = notes.length;

        if (notesLength > 0) {
          notesGroup = $("<ul class='dncalendar-note-list'></ul>");

          for (var i = 0; i < notesLength; i++) {
            var date = notes[i].date,
                noteList = notes[i].notes,
                noteListLength = noteList.length,
                list = "";

            if (list += "<li class='date'>", list += "<span>" + date + "</span> ", noteListLength > 0) {
              list += " : ";

              for (var j = 0; j < noteListLength; j++) {
                list += noteList[j], noteListLength <= j && (list += ", ");
              }
            }

            list += "</li>", notesGroup.append(list);
          }
        }
      }

      tableGroup.append(tableHeadGroup), tableGroup.append(tableBodyGroup), bodyGroup.append(tableGroup), self.html(""), self.append(headerGroup), self.append(bodyGroup), self.append(notesGroup);
    },
        dateIsNotes = function dateIsNotes(date) {
      for (var notesLength = settings.notes.length, i = 0; i < notesLength; i++) {
        var dateNote = settings.notes[i].date.split("-"),
            nDate = new Date(dateNote[0], dateNote[1] - 1, dateNote[2]);
        if (nDate.getFullYear() == date.getFullYear() && nDate.getMonth() == date.getMonth() && nDate.getDate() == date.getDate()) return !0;
      }

      return !1;
    },
        getNotesThisMonth = function getNotesThisMonth() {
      for (var result = [], notesLength = settings.notes.length, i = 0; i < notesLength; i++) {
        var dateNote = settings.notes[i].date.split("-"),
            nDate = new Date(dateNote[0], dateNote[1] - 1, dateNote[2]);

        if (nDate.getFullYear() == currDate.getFullYear() && nDate.getMonth() == currDate.getMonth()) {
          var temp = {};
          temp.date = nDate.getDate(), temp.notes = settings.notes[i].note, result.push(temp);
        }
      }

      return result;
    },
        verificaDiasDisponiveis = function verificaDiasDisponiveis() {
      var arrDatas = JSON.parse(document.querySelector("#arrDatas").value),
          todasDatasDisponiveis = document.querySelectorAll(".disponivel"),
          arrDatasDisponiveis = [];

      for (var j = 0; j < arrDatas.length; j++) {
        for (var i = 0; i < todasDatasDisponiveis.length; i++) {
          todasDatasDisponiveis[i].classList.remove("disponivel", "calendarClick"), todasDatasDisponiveis[i].classList.add("indisponivel"), todasDatasDisponiveis[i].setAttribute("id", "");
          var dia = todasDatasDisponiveis[i].dataset.date;
          dia = dia < 10 ? "0" + dia : dia;
          var mes = todasDatasDisponiveis[i].dataset.month;
          mes = mes < 10 ? "0" + mes : mes;
          var ano = todasDatasDisponiveis[i].dataset.year,
              data = ano + "-" + mes + "-" + dia;
          data == arrDatas[j] && arrDatasDisponiveis.push(todasDatasDisponiveis[i]);
        }
      }

      for (var _i = 0; _i < arrDatasDisponiveis.length; _i++) {
        arrDatasDisponiveis[_i].classList.remove("indisponivel"), arrDatasDisponiveis[_i].classList.add("disponivel", "calendarClick"), arrDatasDisponiveis[_i].setAttribute("id", "calendarClick");
      }
    },
        nextMonth = function nextMonth() {
      var firstDateOfNextMonth = new Date(currDate.getFullYear(), currDate.getMonth() + 1, 1),
          date = firstDateOfNextMonth.getDate(),
          month = firstDateOfNextMonth.getMonth(),
          year = firstDateOfNextMonth.getFullYear();
      currDate = new Date(year, month, date), document.querySelector("#confirma-folga").classList.add("dNone"), draw(), verificaDiasDisponiveis();
    },
        prevMonth = function prevMonth() {
      var firstDateOfPrevMonth = new Date(currDate.getFullYear(), currDate.getMonth() - 1, 1),
          date = firstDateOfPrevMonth.getDate(),
          month = firstDateOfPrevMonth.getMonth(),
          year = firstDateOfPrevMonth.getFullYear();
      currDate = new Date(year, month, date), document.querySelector("#confirma-folga").classList.add("dNone"), draw(), verificaDiasDisponiveis();
    },
        triggerAction = function triggerAction() {
      $("body").on("click", "#" + self.attr("id") + " #calendarClick", function () {
        var selectedDate = $(this).data("date"),
            selectedMonth = $(this).data("month"),
            selectedYear = $(this).data("year");
        settings.dayClick.call(this, selectedDate, selectedMonth, this, self);
      });

      var limitaMeses = function limitaMeses(operador, range) {
        var mesAtual = new Date().getMonth(),
            mesSelecionado = parseInt($(".dncalendar-body table tbody tr td:eq(7)").attr("data-month"));

        if ("+" == operador) {
          var limite = range + mesAtual;
          return !(mesSelecionado > (limite = limite > 12 ? 12 : limite));
        }

        return mesSelecionado > ++mesAtual;
      };

      $("body").on("click", "#dncalendar-prev-month", function () {
        var verifica;
        limitaMeses("-", 1) && prevMonth();
      }), $("body").on("click", "#dncalendar-next-month", function () {
        var verifica;
        limitaMeses("+", 1) && nextMonth();
      });
    };

    return {
      build: function build() {
        if (void 0 !== (settings = $.extend({}, $.fn.dnCalendar.defaults, options)).defaultDate) {
          var defaultDateArr = settings.defaultDate.split("-");
          currDate = new Date(defaultDateArr[0], defaultDateArr[1] - 1, defaultDateArr[2]), defDate = currDate;
        }

        draw(), triggerAction();
      },
      update: function update(options) {
        if (void 0 !== (settings = $.extend(settings, options)).defaultDate) {
          var defaultDateArr = settings.defaultDate.split("-");
          currDate = new Date(defaultDateArr[0], defaultDateArr[1] - 1, defaultDateArr[2]), defDate = currDate;
        }

        draw();
      }
    };
  }, $.fn.dnCalendar.defaults = {
    monthNames: ["Janeiro", "Fevereiro", "MarÃ§o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
    monthNamesShort: ["Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
    dayNames: ["Domingo", "Segunda-feira", "TerÃ§a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "SÃ¡bado"],
    dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
    dayUseShortName: !1,
    monthUseShortName: !1,
    showNotes: !1,
    startWeek: "domingo",
    dayClick: function dayClick(date, view) {}
  };
}(jQuery);