.sel {
  select {
    height: 25px;
    width: 100%;
    padding-left: 5px;
    border-color: #ccc;
    border: 1px solid #ccc;
    border-radius: 15px;
    color: black;
    option{
      color: black;
      border-radius: 15px;
    }
    &:focus{
      border-color: green;
      box-shadow: 0 0 0.2em green;
      border: 1px solid #ccc;
      outline: 0
    }
  }
}

// Vue Select (plugin nao funcionou direito e tive - Augusto - que repassar isso aqui) 

.select{
  width: 300px;
  margin: 15px 0;
  *{
    color: black
  }
}

$vs-colors: (
  lightest: rgba(60, 60, 60, 0.26),
  light: rgba(60, 60, 60, 0.5),
  dark: #333,
  darkest: rgba(0, 0, 0, .15),
) !default;

//  Global Component Variables
$vs-component-line-height: 1.4 !default;
$vs-component-placeholder-color: inherit !default;

//  Active State
$vs-state-active-bg: #5897fb !default;
$vs-state-active-color: #fff !default;

//  Disabled State
$vs-state-disabled-bg: rgb(248, 248, 248) !default;
$vs-state-disabled-color: map_get($vs-colors, 'light') !default;
$vs-state-disabled-controls-color: map_get($vs-colors, 'light') !default;
$vs-state-disabled-cursor: not-allowed !default;

//  Borders
$vs-border-width: 1px !default;
$vs-border-style: solid !default;
$vs-border-radius: 4px !default;
$vs-border-color: map_get($vs-colors, 'lightest') !default;

//  Component Controls: Clear, Open Indicator
$vs-controls-color: map_get($vs-colors, 'light') !default;
$vs-controls-size: 1 !default;
$vs-controls-deselect-text-shadow: 0 1px 0 #fff;

//  Selected
$vs-selected-bg: #f0f0f0 !default;
$vs-selected-border-color: $vs-border-color !default;
$vs-selected-border-style: $vs-border-style !default;
$vs-selected-border-width: $vs-border-width !default;

//  Dropdown
$vs-dropdown-z-index: 1000 !default;
$vs-dropdown-min-width: 160px !default;
$vs-dropdown-max-height: 350px !default;
$vs-dropdown-box-shadow: 0px 3px 6px 0px map_get($vs-colors, 'darkest') !default;
$vs-dropdown-bg: #fff !default;

$transition-timing-function: cubic-bezier(1.0, 0.5, 0.8, 1.0);
$transition-duration: .15s;

/* KeyFrames */
@-webkit-keyframes vSelectSpinner {
  0% {
    -webkit-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    -ms-transform: rotate(0deg);

    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);

    transform: rotate(360deg);
  }
}

@keyframes vSelectSpinner {
  0% {
    -webkit-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    -ms-transform: rotate(0deg);

    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    -ms-transform: rotate(360deg);

    transform: rotate(360deg);
  }
}

/* Dropdown Default Transition */
.vs__fade-enter-active,
.vs__fade-leave-active {
  transition: opacity $transition-duration $transition-timing-function;
}
.vs__fade-enter,
.vs__fade-leave-to {
  opacity: 0;
}

.v-select {
  position: relative;
  font-family: inherit;
}

.v-select,
.v-select * {
  box-sizing: border-box;
}

/** Component States */

/*
 * Disabled
 *
 * When the component is disabled, all interaction
 * should be prevented. Here we modify the bg color,
 * and change the cursor displayed on the interactive
 * components.
 */

 $disabled-bg: $vs-state-disabled-bg;
 $disabled-color: $vs-state-disabled-color;
 $disabled-cursor: $vs-state-disabled-cursor;
 
 .vs--disabled {
   .vs__dropdown-toggle,
   .vs__clear,
   .vs__search,
   .vs__selected,
   .vs__open-indicator {
     cursor: $disabled-cursor;
     background-color: $disabled-bg;
   }
 }
 
 /*
  *  RTL - Right to Left Support
  *
  *  Because we're using a flexbox layout, the `dir="rtl"`
  *  HTML attribute does most of the work for us by
  *  rearranging the child elements visually.
  */
 
 .v-select[dir="rtl"] {
   .vs__actions {
     padding: 0 3px 0 6px;
   }
 
   .vs__clear {
     margin-left: 6px;
     margin-right: 0;
   }
 
   .vs__deselect {
     margin-left: 0;
     margin-right: 2px;
   }
 
   .vs__dropdown-menu {
     text-align: right;
   }
 }

/* Clear Button */

.vs__clear {
  fill: $vs-controls-color;
  padding: 0;
  border: 0;
  background-color: transparent;
  cursor: pointer;
  margin-right: 8px;
}

/* Dropdown Menu */

$border-width: $vs-border-width;
$border-style: solid;
$border-color: $vs-border-color;
$border-radius: $vs-border-radius;
$box-shadow: $vs-dropdown-box-shadow;

$bg-color: $vs-dropdown-bg;
$z-index: $vs-dropdown-z-index;
$min-width: $vs-dropdown-min-width;
$max-height: $vs-dropdown-max-height;

.vs__dropdown-menu {
  display: block;
  position: absolute;
  top: calc(100% - #{$border-width}); // -{#$border-width} here ensures the left and right borders of the dropdown appear flush with the toggle.
  left: 0;
  z-index: $z-index;
  padding: 5px 0;
  margin: 0;
  width: 100%;
  max-height: $max-height;
  min-width: $min-width;
  overflow-y: auto;
  box-shadow: $box-shadow;
  border: $border-width $border-style $border-color;
  border-top-style: none;
  border-radius: 0 0 $border-radius $border-radius;
  text-align: left;
  list-style: none;
  background: $bg-color;
}

.vs__no-options {
  text-align: center;
}

/* List Items */
.vs__dropdown-option {
  line-height: 1.42857143; /* Normalize line height */
  display: block;
  padding: 3px 20px;
  clear: both;
  color: #333; /* Overrides most CSS frameworks */
  white-space: nowrap;

  &:hover {
    cursor: pointer;
  }
}

.vs__dropdown-option--highlight {
  background: $vs-state-active-bg;
  color: $vs-state-active-color;
}

.vs__dropdown-option--disabled {
  background: inherit;
  color: $vs-state-disabled-color;

  &:hover {
    cursor: inherit;
  }
}

/**
    Dropdown Toggle

    The dropdown toggle is the primary wrapper of the component. It
    has two direct descendants: .vs__selected-options, and .vs__actions.

    .vs__selected-options holds the .vs__selected's as well as the
    main search input.

    .vs__actions holds the clear button and dropdown toggle.
 */

 $border-width: $vs-border-width;
 $border-style: $vs-border-style;
 $border-color: $vs-border-color;
 $border-radius: $vs-border-radius;
 
 .vs__dropdown-toggle {
   appearance: none;
   display: flex;
   padding: 0 0 4px 0;
   background: none;
   border: $border-width $border-style $border-color;
   border-radius: $border-radius;
   white-space: normal;
 }
 
 .vs__selected-options {
   display: flex;
   flex-basis: 100%;
   flex-grow: 1;
   flex-wrap: wrap;
   padding: 0 2px;
   position: relative;
 }
 
 .vs__actions {
   display: flex;
   align-items: center;
   padding: 4px 6px 0 3px;
 }
 
 /* Dropdown Toggle States */
 .vs--searchable .vs__dropdown-toggle {
   cursor: text;
 }
 .vs--unsearchable .vs__dropdown-toggle {
   cursor: pointer;
 }
 .vs--open .vs__dropdown-toggle {
   border-bottom-color: transparent;
   border-bottom-left-radius: 0;
   border-bottom-right-radius: 0;
 }

 //  Open Indicator

//  The open indicator appears as a down facing
//  caret on the right side of the select.

$transition-timing-function: cubic-bezier(1.000, -0.115, 0.975, 0.855);
$transition-duration: 150ms;

$open-indicator-color: $vs-controls-color;
$open-indicator-size: $vs-controls-size;

.vs__open-indicator {
  fill: $open-indicator-color;

  -webkit-transform: scale($open-indicator-size);
  -moz-transform: scale($open-indicator-size);
  -o-transform: scale($open-indicator-size);
  -ms-transform: scale($open-indicator-size);

  transform: scale($open-indicator-size);
  transition: transform $transition-duration $transition-timing-function;
  transition-timing-function: $transition-timing-function;
}

//  Open State

.vs--open .vs__open-indicator {
  -webkit-transform: rotate(180deg) scale($open-indicator-size);
  -moz-transform: rotate(180deg) scale($open-indicator-size);
  -o-transform: rotate(180deg) scale($open-indicator-size);
  -ms-transform: rotate(180deg) scale($open-indicator-size);

  transform: rotate(180deg) scale($open-indicator-size);
}

//  Loading State

.vs--loading .vs__open-indicator {
  opacity: 0;
}

/* Search Input */

$line-height: $vs-component-line-height;
$font-size: 1em;

/**
 * Super weird bug... If this declaration is grouped
 * below, the cancel button will still appear in chrome.
 * If it's up here on it's own, it'll hide it.
 */
.vs__search::-webkit-search-cancel-button {
  display: none;
}

.vs__search::-webkit-search-decoration,
.vs__search::-webkit-search-results-button,
.vs__search::-webkit-search-results-decoration,
.vs__search::-ms-clear {
  display: none;
}

.vs__search,
.vs__search:focus {
  appearance: none;
  line-height: $line-height;
  font-size: $font-size;
  border: 1px solid transparent;
  border-left: none;
  outline: none;
  margin: 4px 0 0 0;
  padding: 0 7px;
  background: none;
  box-shadow: none;
  width: 0;
  max-width: 100%;
  flex-grow: 1;
}

.vs__search::placeholder {
  color: $vs-component-placeholder-color;
}

/**
    States
 */

// Unsearchable
.vs--unsearchable {
  .vs__search {
    opacity: 1;

    &:hover {
      cursor: pointer;
    }
  }
}
// Single, when searching but not loading or open
.vs--single.vs--searching:not(.vs--open):not(.vs--loading) {
    .vs__search {
      opacity: .2;
    }
}

/* Selected Tags */
.vs__selected {
  display: flex;
  align-items: center;
  background-color: $vs-selected-bg;
  border: $vs-selected-border-width $vs-selected-border-style $vs-selected-border-color;
  border-radius: $vs-border-radius;
  color: map_get($vs-colors, 'dark');
  line-height: $vs-component-line-height;
  margin: 4px 2px 0px 2px;
  padding: 0 0.25em;
}

.vs__deselect {
  display: inline-flex;
  appearance: none;
  margin-left: 4px;
  padding: 0;
  border: 0;
  cursor: pointer;
  background: none;
  fill: $vs-controls-color;
  text-shadow: $vs-controls-deselect-text-shadow;
}

/* States */

.vs--single {
  .vs__selected {
    background-color: transparent;
    border-color: transparent;
  }
  &.vs--open .vs__selected {
    position: absolute;
    opacity: .4;
  }
  &.vs--searching .vs__selected {
    display: none;
  }
}

/* Loading Spinner */
.vs__spinner {
  align-self: center;
  opacity: 0;
  font-size: 5px;
  text-indent: -9999em;
  overflow: hidden;
  border-top: .9em solid rgba(100, 100, 100, .1);
  border-right: .9em solid rgba(100, 100, 100, .1);
  border-bottom: .9em solid rgba(100, 100, 100, .1);
  border-left: .9em solid rgba(60, 60, 60, .45);

  -webkit-transform: translateZ(0);
  -moz-transform: translateZ(0);
  -o-transform: translateZ(0);
  -ms-transform: translateZ(0);

  transform: translateZ(0);

  -webkit-animation: vSelectSpinner 1.1s infinite linear;
  -moz-animation: vSelectSpinner 1.1s infinite linear;
  -o-animation: vSelectSpinner 1.1s infinite linear;

  animation: vSelectSpinner 1.1s infinite linear;
  transition: opacity .1s;
}
.vs__spinner,
.vs__spinner:after {
  border-radius: 50%;
  width: 5em;
  height: 5em;
}

/* Loading Spinner States */
.vs--loading .vs__spinner {
  opacity: 1;
}
